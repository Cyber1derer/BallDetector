import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

m = 0.1  #mass of the ball
g = 9.81  # acceleration due to gravity
k = 0.1   # drag coefficient

def force(v):
    return -k*v -m*g

def acceleration(v,t):
    return force(v)/m

def velocity(v,a,dt):
    return v + a*dt

def position(r,v,dt):
    return r + v*dt

r0 = np.array([0, 0, 0])  # initial position
v0 = np.array([10, 5, 3])  # initial velocity
dt = 0.01  # time step
t = 0

r = r0
v = v0
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

def update(num):
    global r,v,t
    a = acceleration(v,t)
    v = velocity(v,a,dt)
    r = position(r,v,dt)
    t += dt
    ax.clear()
    ax.scatter(r[0], r[1], r[2])
    ax.set_xlim([-2, 2])
    ax.set_ylim([-2, 2])
    ax.set_zlim([-2, 2])

ani = FuncAnimation(fig, update, frames=np.arange(0, 100, 1), repeat=True)
plt.show()

'''
Первые несколько строк импортируют необходимые библиотеки: numpy для работы с массивами, matplotlib для построения графиков и функционала анимации, который позволяет создать анимацию путем последовательного обновления графика.

Затем определены некоторые константы, такие как масса шара, ускорение свободного падения и коэффициент сопротивления воздуха, а также несколько функций, которые используются для расчета движения шара:

Функция "force" принимает скорость шара в качестве входного параметра и возвращает значение силы сопротивления воздуха, которая противодействует движению шара.
Функция "acceleration" принимает скорость и время в качестве входных параметров и использует функцию "force" для расчета ускорения шара.
Функция "velocity" принимает текущую скорость, ускорение и временной шаг в качестве входных параметров и возвращает новую скорость после применения ускорения за время dt.
Функция "position" принимает текущее положение, скорость и временной шаг в качестве входных параметров и возвращает новое положение после применения скорости за время dt.
Затем определены начальные условия: начальное положение и скорость шара, а также временной шаг.

В функции "update" используются определенные ранее функции для вычисления нового положения и скорости шара на каждом шаге анимации. Переменные r, v и t обновляются, а затем происходит очистка и обновление трехмерного графика с помощью вызова методов clear и scatter для отображения нового положения шара. Ограничения графика устанавливаются с помощью методов set_xlim, set_ylim и set_zlim.

Наконец, создается объект анимации с помощью функции FuncAnimation, которая вызывает функцию "update" на каждом шаге, используя диапазон фреймов от 0 до 100, с шагом 1, и повторяется бесконечно, пока пользователь не закроет окно анимации. Затем анимация отображается с помощью метода show модуля pyplot.
'''